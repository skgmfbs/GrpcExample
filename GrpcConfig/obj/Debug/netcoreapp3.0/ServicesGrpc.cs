// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/services.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace GrpcConfig.Services {
  /// <summary>
  /// The company service definition.
  /// </summary>
  public static partial class CompanyService
  {
    static readonly string __ServiceName = "GrpcConfig.Services.CompanyService";

    static readonly grpc::Marshaller<global::GrpcConfig.Definition.GetCompaniesRequest> __Marshaller_GrpcConfig_Definition_GetCompaniesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConfig.Definition.GetCompaniesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConfig.Definition.CompanyResponse> __Marshaller_GrpcConfig_Definition_CompanyResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConfig.Definition.CompanyResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConfig.Definition.GetCompanyByIdRequest> __Marshaller_GrpcConfig_Definition_GetCompanyByIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConfig.Definition.GetCompanyByIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConfig.Definition.GetCompanyByCodeRequest> __Marshaller_GrpcConfig_Definition_GetCompanyByCodeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConfig.Definition.GetCompanyByCodeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConfig.Definition.CompaniesResponse> __Marshaller_GrpcConfig_Definition_CompaniesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConfig.Definition.CompaniesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConfig.Definition.GetCompanyByNameRequest> __Marshaller_GrpcConfig_Definition_GetCompanyByNameRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConfig.Definition.GetCompanyByNameRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::GrpcConfig.Definition.GetCompaniesRequest, global::GrpcConfig.Definition.CompanyResponse> __Method_GetCompanies = new grpc::Method<global::GrpcConfig.Definition.GetCompaniesRequest, global::GrpcConfig.Definition.CompanyResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetCompanies",
        __Marshaller_GrpcConfig_Definition_GetCompaniesRequest,
        __Marshaller_GrpcConfig_Definition_CompanyResponse);

    static readonly grpc::Method<global::GrpcConfig.Definition.GetCompanyByIdRequest, global::GrpcConfig.Definition.CompanyResponse> __Method_GetCompanyById = new grpc::Method<global::GrpcConfig.Definition.GetCompanyByIdRequest, global::GrpcConfig.Definition.CompanyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCompanyById",
        __Marshaller_GrpcConfig_Definition_GetCompanyByIdRequest,
        __Marshaller_GrpcConfig_Definition_CompanyResponse);

    static readonly grpc::Method<global::GrpcConfig.Definition.GetCompanyByCodeRequest, global::GrpcConfig.Definition.CompaniesResponse> __Method_GetCompanyByCode = new grpc::Method<global::GrpcConfig.Definition.GetCompanyByCodeRequest, global::GrpcConfig.Definition.CompaniesResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "GetCompanyByCode",
        __Marshaller_GrpcConfig_Definition_GetCompanyByCodeRequest,
        __Marshaller_GrpcConfig_Definition_CompaniesResponse);

    static readonly grpc::Method<global::GrpcConfig.Definition.GetCompanyByNameRequest, global::GrpcConfig.Definition.CompanyResponse> __Method_GetCompanyByName = new grpc::Method<global::GrpcConfig.Definition.GetCompanyByNameRequest, global::GrpcConfig.Definition.CompanyResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "GetCompanyByName",
        __Marshaller_GrpcConfig_Definition_GetCompanyByNameRequest,
        __Marshaller_GrpcConfig_Definition_CompanyResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::GrpcConfig.Services.ServicesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CompanyService</summary>
    [grpc::BindServiceMethod(typeof(CompanyService), "BindService")]
    public abstract partial class CompanyServiceBase
    {
      /// <summary>
      /// get all companies.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetCompanies(global::GrpcConfig.Definition.GetCompaniesRequest request, grpc::IServerStreamWriter<global::GrpcConfig.Definition.CompanyResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get company by id.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConfig.Definition.CompanyResponse> GetCompanyById(global::GrpcConfig.Definition.GetCompanyByIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get company by code.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConfig.Definition.CompaniesResponse> GetCompanyByCode(grpc::IAsyncStreamReader<global::GrpcConfig.Definition.GetCompanyByCodeRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get company by name.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetCompanyByName(grpc::IAsyncStreamReader<global::GrpcConfig.Definition.GetCompanyByNameRequest> requestStream, grpc::IServerStreamWriter<global::GrpcConfig.Definition.CompanyResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CompanyService</summary>
    public partial class CompanyServiceClient : grpc::ClientBase<CompanyServiceClient>
    {
      /// <summary>Creates a new client for CompanyService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CompanyServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CompanyService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CompanyServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CompanyServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CompanyServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// get all companies.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::GrpcConfig.Definition.CompanyResponse> GetCompanies(global::GrpcConfig.Definition.GetCompaniesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get all companies.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::GrpcConfig.Definition.CompanyResponse> GetCompanies(global::GrpcConfig.Definition.GetCompaniesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetCompanies, null, options, request);
      }
      /// <summary>
      /// get company by id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConfig.Definition.CompanyResponse GetCompanyById(global::GrpcConfig.Definition.GetCompanyByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get company by id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConfig.Definition.CompanyResponse GetCompanyById(global::GrpcConfig.Definition.GetCompanyByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCompanyById, null, options, request);
      }
      /// <summary>
      /// get company by id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConfig.Definition.CompanyResponse> GetCompanyByIdAsync(global::GrpcConfig.Definition.GetCompanyByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get company by id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConfig.Definition.CompanyResponse> GetCompanyByIdAsync(global::GrpcConfig.Definition.GetCompanyByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCompanyById, null, options, request);
      }
      /// <summary>
      /// get company by code.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::GrpcConfig.Definition.GetCompanyByCodeRequest, global::GrpcConfig.Definition.CompaniesResponse> GetCompanyByCode(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyByCode(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get company by code.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::GrpcConfig.Definition.GetCompanyByCodeRequest, global::GrpcConfig.Definition.CompaniesResponse> GetCompanyByCode(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_GetCompanyByCode, null, options);
      }
      /// <summary>
      /// get company by name.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::GrpcConfig.Definition.GetCompanyByNameRequest, global::GrpcConfig.Definition.CompanyResponse> GetCompanyByName(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanyByName(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get company by name.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::GrpcConfig.Definition.GetCompanyByNameRequest, global::GrpcConfig.Definition.CompanyResponse> GetCompanyByName(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_GetCompanyByName, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CompanyServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CompanyServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CompanyServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetCompanies, serviceImpl.GetCompanies)
          .AddMethod(__Method_GetCompanyById, serviceImpl.GetCompanyById)
          .AddMethod(__Method_GetCompanyByCode, serviceImpl.GetCompanyByCode)
          .AddMethod(__Method_GetCompanyByName, serviceImpl.GetCompanyByName).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CompanyServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetCompanies, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::GrpcConfig.Definition.GetCompaniesRequest, global::GrpcConfig.Definition.CompanyResponse>(serviceImpl.GetCompanies));
      serviceBinder.AddMethod(__Method_GetCompanyById, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GrpcConfig.Definition.GetCompanyByIdRequest, global::GrpcConfig.Definition.CompanyResponse>(serviceImpl.GetCompanyById));
      serviceBinder.AddMethod(__Method_GetCompanyByCode, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::GrpcConfig.Definition.GetCompanyByCodeRequest, global::GrpcConfig.Definition.CompaniesResponse>(serviceImpl.GetCompanyByCode));
      serviceBinder.AddMethod(__Method_GetCompanyByName, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::GrpcConfig.Definition.GetCompanyByNameRequest, global::GrpcConfig.Definition.CompanyResponse>(serviceImpl.GetCompanyByName));
    }

  }
  /// <summary>
  /// The country service definition.
  /// </summary>
  public static partial class CountryService
  {
    static readonly string __ServiceName = "GrpcConfig.Services.CountryService";

    static readonly grpc::Marshaller<global::GrpcConfig.Definition.GetCountriesRequest> __Marshaller_GrpcConfig_Definition_GetCountriesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConfig.Definition.GetCountriesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConfig.Definition.CountryResponse> __Marshaller_GrpcConfig_Definition_CountryResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConfig.Definition.CountryResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConfig.Definition.GetCountryByIdRequest> __Marshaller_GrpcConfig_Definition_GetCountryByIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConfig.Definition.GetCountryByIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConfig.Definition.GetCountryByCodeRequest> __Marshaller_GrpcConfig_Definition_GetCountryByCodeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConfig.Definition.GetCountryByCodeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConfig.Definition.CountriesResponse> __Marshaller_GrpcConfig_Definition_CountriesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConfig.Definition.CountriesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcConfig.Definition.GetCountryByNameRequest> __Marshaller_GrpcConfig_Definition_GetCountryByNameRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcConfig.Definition.GetCountryByNameRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::GrpcConfig.Definition.GetCountriesRequest, global::GrpcConfig.Definition.CountryResponse> __Method_GetCountries = new grpc::Method<global::GrpcConfig.Definition.GetCountriesRequest, global::GrpcConfig.Definition.CountryResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetCountries",
        __Marshaller_GrpcConfig_Definition_GetCountriesRequest,
        __Marshaller_GrpcConfig_Definition_CountryResponse);

    static readonly grpc::Method<global::GrpcConfig.Definition.GetCountryByIdRequest, global::GrpcConfig.Definition.CountryResponse> __Method_GetCountryById = new grpc::Method<global::GrpcConfig.Definition.GetCountryByIdRequest, global::GrpcConfig.Definition.CountryResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCountryById",
        __Marshaller_GrpcConfig_Definition_GetCountryByIdRequest,
        __Marshaller_GrpcConfig_Definition_CountryResponse);

    static readonly grpc::Method<global::GrpcConfig.Definition.GetCountryByCodeRequest, global::GrpcConfig.Definition.CountriesResponse> __Method_GetCountryByCode = new grpc::Method<global::GrpcConfig.Definition.GetCountryByCodeRequest, global::GrpcConfig.Definition.CountriesResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "GetCountryByCode",
        __Marshaller_GrpcConfig_Definition_GetCountryByCodeRequest,
        __Marshaller_GrpcConfig_Definition_CountriesResponse);

    static readonly grpc::Method<global::GrpcConfig.Definition.GetCountryByNameRequest, global::GrpcConfig.Definition.CountryResponse> __Method_GetCountryByName = new grpc::Method<global::GrpcConfig.Definition.GetCountryByNameRequest, global::GrpcConfig.Definition.CountryResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "GetCountryByName",
        __Marshaller_GrpcConfig_Definition_GetCountryByNameRequest,
        __Marshaller_GrpcConfig_Definition_CountryResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::GrpcConfig.Services.ServicesReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of CountryService</summary>
    [grpc::BindServiceMethod(typeof(CountryService), "BindService")]
    public abstract partial class CountryServiceBase
    {
      /// <summary>
      /// get all countries.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetCountries(global::GrpcConfig.Definition.GetCountriesRequest request, grpc::IServerStreamWriter<global::GrpcConfig.Definition.CountryResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get country by id.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConfig.Definition.CountryResponse> GetCountryById(global::GrpcConfig.Definition.GetCountryByIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get country by code.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcConfig.Definition.CountriesResponse> GetCountryByCode(grpc::IAsyncStreamReader<global::GrpcConfig.Definition.GetCountryByCodeRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get country by name.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetCountryByName(grpc::IAsyncStreamReader<global::GrpcConfig.Definition.GetCountryByNameRequest> requestStream, grpc::IServerStreamWriter<global::GrpcConfig.Definition.CountryResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CountryService</summary>
    public partial class CountryServiceClient : grpc::ClientBase<CountryServiceClient>
    {
      /// <summary>Creates a new client for CountryService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CountryServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CountryService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CountryServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CountryServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CountryServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// get all countries.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::GrpcConfig.Definition.CountryResponse> GetCountries(global::GrpcConfig.Definition.GetCountriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCountries(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get all countries.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::GrpcConfig.Definition.CountryResponse> GetCountries(global::GrpcConfig.Definition.GetCountriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetCountries, null, options, request);
      }
      /// <summary>
      /// get country by id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConfig.Definition.CountryResponse GetCountryById(global::GrpcConfig.Definition.GetCountryByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCountryById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get country by id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcConfig.Definition.CountryResponse GetCountryById(global::GrpcConfig.Definition.GetCountryByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCountryById, null, options, request);
      }
      /// <summary>
      /// get country by id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConfig.Definition.CountryResponse> GetCountryByIdAsync(global::GrpcConfig.Definition.GetCountryByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCountryByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get country by id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcConfig.Definition.CountryResponse> GetCountryByIdAsync(global::GrpcConfig.Definition.GetCountryByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCountryById, null, options, request);
      }
      /// <summary>
      /// get country by code.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::GrpcConfig.Definition.GetCountryByCodeRequest, global::GrpcConfig.Definition.CountriesResponse> GetCountryByCode(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCountryByCode(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get country by code.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::GrpcConfig.Definition.GetCountryByCodeRequest, global::GrpcConfig.Definition.CountriesResponse> GetCountryByCode(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_GetCountryByCode, null, options);
      }
      /// <summary>
      /// get country by name.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::GrpcConfig.Definition.GetCountryByNameRequest, global::GrpcConfig.Definition.CountryResponse> GetCountryByName(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCountryByName(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get country by name.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::GrpcConfig.Definition.GetCountryByNameRequest, global::GrpcConfig.Definition.CountryResponse> GetCountryByName(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_GetCountryByName, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CountryServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CountryServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CountryServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetCountries, serviceImpl.GetCountries)
          .AddMethod(__Method_GetCountryById, serviceImpl.GetCountryById)
          .AddMethod(__Method_GetCountryByCode, serviceImpl.GetCountryByCode)
          .AddMethod(__Method_GetCountryByName, serviceImpl.GetCountryByName).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CountryServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetCountries, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::GrpcConfig.Definition.GetCountriesRequest, global::GrpcConfig.Definition.CountryResponse>(serviceImpl.GetCountries));
      serviceBinder.AddMethod(__Method_GetCountryById, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GrpcConfig.Definition.GetCountryByIdRequest, global::GrpcConfig.Definition.CountryResponse>(serviceImpl.GetCountryById));
      serviceBinder.AddMethod(__Method_GetCountryByCode, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::GrpcConfig.Definition.GetCountryByCodeRequest, global::GrpcConfig.Definition.CountriesResponse>(serviceImpl.GetCountryByCode));
      serviceBinder.AddMethod(__Method_GetCountryByName, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::GrpcConfig.Definition.GetCountryByNameRequest, global::GrpcConfig.Definition.CountryResponse>(serviceImpl.GetCountryByName));
    }

  }
}
#endregion
